# Generated by Django 5.0.14 on 2025-06-13 09:49

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0003_assignment_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Task title', max_length=200)),
                ('description', models.TextField(help_text='Detailed task description')),
                ('short_description', models.CharField(blank=True, help_text='Brief task summary for lists', max_length=500)),
                ('task_type', models.CharField(choices=[('CHECKBOX', 'Checkbox Completion'), ('PHOTO', 'Photo Upload'), ('TEXT', 'Text Submission'), ('CUSTOM', 'Custom Field')], default='CHECKBOX', help_text='Type of task', max_length=20)),
                ('task_configuration', models.JSONField(blank=True, default=dict, help_text='Task-specific configuration based on task type')),
                ('category', models.CharField(choices=[('TRAINING', 'Training & Certification'), ('DOCUMENTATION', 'Documentation'), ('VERIFICATION', 'Verification & Validation'), ('PREPARATION', 'Event Preparation'), ('COMPLIANCE', 'Compliance & Safety'), ('COMMUNICATION', 'Communication'), ('EQUIPMENT', 'Equipment & Supplies'), ('REPORTING', 'Reporting & Feedback'), ('OTHER', 'Other')], default='OTHER', help_text='Task category', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low Priority'), ('NORMAL', 'Normal Priority'), ('HIGH', 'High Priority'), ('URGENT', 'Urgent'), ('CRITICAL', 'Critical')], default='NORMAL', help_text='Task priority level', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('ARCHIVED', 'Archived')], default='DRAFT', help_text='Current task status', max_length=20)),
                ('start_date', models.DateTimeField(blank=True, help_text='When task becomes available', null=True)),
                ('due_date', models.DateTimeField(blank=True, help_text='Task due date', null=True)),
                ('estimated_duration_minutes', models.PositiveIntegerField(blank=True, help_text='Estimated time to complete task (in minutes)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)])),
                ('is_mandatory', models.BooleanField(default=False, help_text='Whether this task is mandatory for the role')),
                ('requires_verification', models.BooleanField(default=False, help_text='Whether task completion requires staff verification')),
                ('verification_instructions', models.TextField(blank=True, help_text='Instructions for staff verification')),
                ('total_completions', models.PositiveIntegerField(default=0, help_text='Total number of completions')),
                ('verified_completions', models.PositiveIntegerField(default=0, help_text='Number of verified completions')),
                ('send_reminders', models.BooleanField(default=True, help_text='Send reminder notifications for this task')),
                ('reminder_days_before', models.PositiveIntegerField(default=3, help_text='Days before due date to send reminders', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('instructions', models.TextField(blank=True, help_text='Detailed instructions for completing the task')),
                ('resources_links', models.JSONField(blank=True, default=list, help_text='Links to resources, documents, or training materials')),
                ('attachments', models.JSONField(blank=True, default=list, help_text='File attachments for the task')),
                ('validation_rules', models.JSONField(blank=True, default=dict, help_text='Validation rules for task completion')),
                ('acceptance_criteria', models.TextField(blank=True, help_text='Criteria for accepting task completion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status_changed_at', models.DateTimeField(blank=True, help_text='When status was last changed', null=True)),
                ('status_change_reason', models.TextField(blank=True, help_text='Reason for status change')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying tasks')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this task prominently')),
                ('created_by', models.ForeignKey(help_text='User who created this task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='Event this task belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='events.event')),
                ('prerequisite_tasks', models.ManyToManyField(blank=True, help_text='Tasks that must be completed before this one', related_name='dependent_tasks', to='tasks.task')),
                ('role', models.ForeignKey(help_text='Role this task is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='events.role')),
                ('status_changed_by', models.ForeignKey(blank=True, help_text='User who last changed the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changed_tasks', to=settings.AUTH_USER_MODEL)),
                ('venue', models.ForeignKey(blank=True, help_text='Venue this task is specific to (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='events.venue')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'db_table': 'tasks_task',
                'ordering': ['display_order', 'priority', 'due_date', 'title'],
                'indexes': [models.Index(fields=['role', 'status'], name='tasks_task_role_id_ef5fff_idx'), models.Index(fields=['event', 'status'], name='tasks_task_event_i_d801a2_idx'), models.Index(fields=['venue', 'status'], name='tasks_task_venue_i_ac8a29_idx'), models.Index(fields=['task_type', 'status'], name='tasks_task_task_ty_265be9_idx'), models.Index(fields=['category', 'priority'], name='tasks_task_categor_469715_idx'), models.Index(fields=['due_date', 'status'], name='tasks_task_due_dat_3f7773_idx'), models.Index(fields=['is_mandatory', 'status'], name='tasks_task_is_mand_97c444_idx'), models.Index(fields=['created_at'], name='tasks_task_created_be1ba2_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(check=models.Q(('start_date__lte', models.F('due_date')), ('start_date__isnull', True), ('due_date__isnull', True), _connector='OR'), name='task_start_before_due_date'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(check=models.Q(('verified_completions__lte', models.F('total_completions'))), name='task_verified_not_exceed_total'),
        ),
    ]
