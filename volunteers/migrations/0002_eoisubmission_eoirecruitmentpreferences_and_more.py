# Generated by Django 5.0.14 on 2025-06-13 13:11

import common.file_utils
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('volunteers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EOISubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft - In Progress'), ('PROFILE_COMPLETE', 'Profile Section Complete'), ('RECRUITMENT_COMPLETE', 'Recruitment Section Complete'), ('GAMES_COMPLETE', 'Games Section Complete'), ('SUBMITTED', 'Submitted for Review'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('WITHDRAWN', 'Withdrawn')], default='DRAFT', help_text='Current submission status', max_length=25)),
                ('volunteer_type', models.CharField(choices=[('NEW_VOLUNTEER', 'New Volunteer'), ('RETURNING_VOLUNTEER', 'Returning Volunteer'), ('CORPORATE_VOLUNTEER', 'Corporate Volunteer'), ('STUDENT_VOLUNTEER', 'Student Volunteer'), ('FAMILY_VOLUNTEER', 'Family Volunteer'), ('SPECIALIST_VOLUNTEER', 'Specialist/Professional Volunteer')], help_text='Type of volunteer application', max_length=25)),
                ('profile_section_complete', models.BooleanField(default=False, help_text='Profile information section completed')),
                ('recruitment_section_complete', models.BooleanField(default=False, help_text='Recruitment preferences section completed')),
                ('games_section_complete', models.BooleanField(default=False, help_text='Games information section completed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When the EOI was submitted', null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the EOI was reviewed', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Internal review notes')),
                ('confirmation_email_sent', models.BooleanField(default=False, help_text='Confirmation email sent to applicant')),
                ('confirmation_email_sent_at', models.DateTimeField(blank=True, help_text='When confirmation email was sent', null=True)),
                ('session_key', models.CharField(blank=True, help_text='Session key for anonymous submissions', max_length=40)),
                ('completion_percentage', models.PositiveIntegerField(default=0, help_text='Overall completion percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Staff member who reviewed the EOI', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_eoi_submissions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, help_text='Associated user account (if registered)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eoi_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'EOI submission',
                'verbose_name_plural': 'EOI submissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EOIRecruitmentPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volunteer_experience_level', models.CharField(choices=[('NONE', 'No Experience'), ('BEGINNER', 'Beginner (1-2 events)'), ('INTERMEDIATE', 'Intermediate (3-5 events)'), ('EXPERIENCED', 'Experienced (6-10 events)'), ('EXPERT', 'Expert (10+ events)'), ('PROFESSIONAL', 'Professional/Staff')], default='NONE', help_text='Overall volunteering experience level', max_length=20)),
                ('previous_events', models.TextField(blank=True, help_text='List of previous events volunteered at')),
                ('special_skills', models.TextField(blank=True, help_text='Special skills, qualifications, or certifications')),
                ('motivation', models.TextField(help_text='Why do you want to volunteer for ISG 2026?')),
                ('volunteer_goals', models.TextField(blank=True, help_text='What do you hope to achieve through volunteering?')),
                ('preferred_sports', models.JSONField(blank=True, default=list, help_text='Sports you are interested in supporting')),
                ('preferred_venues', models.JSONField(blank=True, default=list, help_text='Preferred venues or venue types')),
                ('preferred_roles', models.JSONField(blank=True, default=list, help_text='Preferred volunteer roles')),
                ('role_restrictions', models.JSONField(blank=True, default=list, help_text='Roles or activities you cannot or will not do')),
                ('availability_level', models.CharField(choices=[('FULL_TIME', 'Full Time (All Days)'), ('PART_TIME', 'Part Time (Some Days)'), ('WEEKENDS_ONLY', 'Weekends Only'), ('SPECIFIC_DAYS', 'Specific Days Only'), ('FLEXIBLE', 'Flexible'), ('LIMITED', 'Limited Availability')], default='FLEXIBLE', help_text='General availability level', max_length=20)),
                ('preferred_time_slots', models.JSONField(blank=True, default=list, help_text='Preferred time slots (morning, afternoon, evening, overnight)')),
                ('max_hours_per_day', models.PositiveIntegerField(default=8, help_text='Maximum hours willing to volunteer per day', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('can_lift_heavy_items', models.BooleanField(default=True, help_text='Able to lift heavy items (over 20kg)')),
                ('can_stand_long_periods', models.BooleanField(default=True, help_text='Able to stand for long periods (4+ hours)')),
                ('can_work_outdoors', models.BooleanField(default=True, help_text='Comfortable working outdoors in various weather')),
                ('can_work_with_crowds', models.BooleanField(default=True, help_text='Comfortable working with large crowds')),
                ('has_own_transport', models.BooleanField(default=False, help_text='Has own reliable transport to venues')),
                ('transport_method', models.CharField(choices=[('OWN_CAR', 'Own Car'), ('PUBLIC_TRANSPORT', 'Public Transport'), ('CYCLING', 'Cycling'), ('WALKING', 'Walking'), ('CARPOOL', 'Carpool'), ('VOLUNTEER_TRANSPORT', 'Volunteer Transport'), ('OTHER', 'Other')], default='PUBLIC_TRANSPORT', help_text='Primary method of transport to venues', max_length=30)),
                ('preferred_communication_method', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS/Text'), ('PHONE', 'Phone Call'), ('WHATSAPP', 'WhatsApp'), ('APP', 'Mobile App')], default='EMAIL', help_text='Preferred method of communication', max_length=20)),
                ('training_interests', models.JSONField(blank=True, default=list, help_text='Areas of training you are interested in')),
                ('leadership_interest', models.BooleanField(default=False, help_text='Interested in leadership or supervisory roles')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('eoi_submission', models.OneToOneField(help_text='Associated EOI submission', on_delete=django.db.models.deletion.CASCADE, related_name='recruitment_preferences', to='volunteers.eoisubmission')),
            ],
            options={
                'verbose_name': 'EOI recruitment preferences',
                'verbose_name_plural': 'EOI recruitment preferences',
            },
        ),
        migrations.CreateModel(
            name='EOIProfileInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='First name', max_length=100)),
                ('last_name', models.CharField(help_text='Last name', max_length=100)),
                ('preferred_name', models.CharField(blank=True, help_text='Preferred name for communications and name tags', max_length=100)),
                ('date_of_birth', models.DateField(help_text='Date of birth (must be at least 15 years old)')),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('NON_BINARY', 'Non-binary'), ('PREFER_NOT_TO_SAY', 'Prefer not to say'), ('OTHER', 'Other')], help_text='Gender identity', max_length=20)),
                ('email', models.EmailField(help_text='Primary email address', max_length=254)),
                ('phone_number', models.CharField(help_text='Primary phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')])),
                ('alternative_phone', models.CharField(blank=True, help_text='Alternative phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')])),
                ('address_line_1', models.CharField(help_text='Street address line 1', max_length=255)),
                ('address_line_2', models.CharField(blank=True, help_text='Street address line 2 (optional)', max_length=255)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('state_province', models.CharField(help_text='State or Province', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal/ZIP code', max_length=20)),
                ('country', models.CharField(default='Ireland', help_text='Country', max_length=100)),
                ('emergency_contact_name', models.CharField(help_text='Emergency contact full name', max_length=200)),
                ('emergency_contact_phone', models.CharField(help_text='Emergency contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')])),
                ('emergency_contact_relationship', models.CharField(help_text='Relationship to emergency contact', max_length=100)),
                ('emergency_contact_email', models.EmailField(blank=True, help_text='Emergency contact email (optional)', max_length=254)),
                ('education_level', models.CharField(blank=True, choices=[('PRIMARY', 'Primary School'), ('SECONDARY', 'Secondary School'), ('CERTIFICATE', 'Certificate/Diploma'), ('UNDERGRADUATE', 'Undergraduate Degree'), ('POSTGRADUATE', 'Postgraduate Degree'), ('DOCTORATE', 'Doctorate'), ('OTHER', 'Other')], help_text='Highest level of education completed', max_length=20)),
                ('employment_status', models.CharField(blank=True, choices=[('EMPLOYED_FULL_TIME', 'Employed Full-time'), ('EMPLOYED_PART_TIME', 'Employed Part-time'), ('SELF_EMPLOYED', 'Self-employed'), ('UNEMPLOYED', 'Unemployed'), ('STUDENT', 'Student'), ('RETIRED', 'Retired'), ('HOMEMAKER', 'Homemaker'), ('OTHER', 'Other')], help_text='Current employment status', max_length=25)),
                ('occupation', models.CharField(blank=True, help_text='Current occupation or field of study', max_length=200)),
                ('languages_spoken', models.JSONField(blank=True, default=list, help_text='Languages spoken and proficiency levels')),
                ('nationality', models.CharField(blank=True, help_text='Nationality', max_length=100)),
                ('medical_conditions', models.TextField(blank=True, help_text='Any medical conditions or allergies we should be aware of')),
                ('mobility_requirements', models.TextField(blank=True, help_text='Any mobility assistance or accessibility requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('eoi_submission', models.OneToOneField(help_text='Associated EOI submission', on_delete=django.db.models.deletion.CASCADE, related_name='profile_information', to='volunteers.eoisubmission')),
            ],
            options={
                'verbose_name': 'EOI profile information',
                'verbose_name_plural': 'EOI profile information',
            },
        ),
        migrations.CreateModel(
            name='EOIGamesInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volunteer_photo', models.ImageField(blank=True, help_text='Recent photo for volunteer ID badge (JPG, JPEG, or PNG format)', null=True, upload_to='volunteer_photos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), common.file_utils.validate_image_file])),
                ('photo_consent', models.BooleanField(default=False, help_text='I consent to my photo being used for volunteer identification and promotional materials')),
                ('t_shirt_size', models.CharField(choices=[('XS', 'Extra Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('XXL', '2X Large'), ('XXXL', '3X Large')], default='M', help_text='T-shirt size for volunteer uniform', max_length=10)),
                ('requires_uniform', models.BooleanField(default=True, help_text='Requires volunteer uniform')),
                ('uniform_collection_preference', models.CharField(choices=[('PICKUP', 'Pick up at volunteer center'), ('DELIVERY', 'Delivery to address'), ('EVENT_DAY', 'Collect on event day')], default='PICKUP', help_text='Preferred method for uniform collection', max_length=20)),
                ('dietary_requirements', models.TextField(blank=True, help_text='Dietary requirements, allergies, or preferences')),
                ('has_food_allergies', models.BooleanField(default=False, help_text='Has food allergies or intolerances')),
                ('food_allergy_details', models.TextField(blank=True, help_text='Details of food allergies or intolerances')),
                ('available_dates', models.JSONField(blank=True, default=list, help_text='Specific dates available for volunteering during the Games')),
                ('unavailable_dates', models.JSONField(blank=True, default=list, help_text='Dates not available for volunteering during the Games')),
                ('preferred_shifts', models.JSONField(blank=True, default=list, help_text='Preferred shift times (early morning, morning, afternoon, evening, late night)')),
                ('requires_accommodation', models.BooleanField(default=False, help_text='Requires accommodation during the Games')),
                ('accommodation_preferences', models.TextField(blank=True, help_text='Accommodation preferences or requirements')),
                ('social_media_consent', models.BooleanField(default=False, help_text='I consent to appear in social media posts and marketing materials')),
                ('testimonial_consent', models.BooleanField(default=False, help_text='I consent to provide testimonials and quotes about my volunteer experience')),
                ('is_part_of_group', models.BooleanField(default=False, help_text='Part of a corporate or organized group')),
                ('group_name', models.CharField(blank=True, help_text='Name of corporate group or organization', max_length=200)),
                ('group_leader_name', models.CharField(blank=True, help_text='Name of group leader or coordinator', max_length=200)),
                ('group_leader_contact', models.CharField(blank=True, help_text='Contact information for group leader', max_length=200)),
                ('additional_information', models.TextField(blank=True, help_text='Any additional information you would like to share')),
                ('how_did_you_hear', models.CharField(blank=True, help_text='How did you hear about the volunteer opportunity?', max_length=200)),
                ('terms_accepted', models.BooleanField(default=False, help_text='I accept the terms and conditions for volunteering')),
                ('privacy_policy_accepted', models.BooleanField(default=False, help_text='I accept the privacy policy')),
                ('code_of_conduct_accepted', models.BooleanField(default=False, help_text='I accept the volunteer code of conduct')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('eoi_submission', models.OneToOneField(help_text='Associated EOI submission', on_delete=django.db.models.deletion.CASCADE, related_name='games_information', to='volunteers.eoisubmission')),
            ],
            options={
                'verbose_name': 'EOI games information',
                'verbose_name_plural': 'EOI games information',
            },
        ),
        migrations.CreateModel(
            name='CorporateVolunteerGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Corporate group or organization name', max_length=200, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the organization')),
                ('website', models.URLField(blank=True, help_text='Organization website')),
                ('primary_contact_name', models.CharField(help_text='Primary contact person name', max_length=200)),
                ('primary_contact_email', models.EmailField(help_text='Primary contact email', max_length=254)),
                ('primary_contact_phone', models.CharField(help_text='Primary contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')])),
                ('address_line_1', models.CharField(help_text='Street address line 1', max_length=255)),
                ('address_line_2', models.CharField(blank=True, help_text='Street address line 2 (optional)', max_length=255)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('state_province', models.CharField(help_text='State or Province', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal/ZIP code', max_length=20)),
                ('country', models.CharField(default='Ireland', help_text='Country', max_length=100)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending Approval'), ('SUSPENDED', 'Suspended')], default='PENDING', help_text='Current group status', max_length=15)),
                ('expected_volunteer_count', models.PositiveIntegerField(help_text='Expected number of volunteers from this group')),
                ('industry_sector', models.CharField(blank=True, help_text='Industry sector or type of organization', max_length=100)),
                ('preferred_volunteer_roles', models.JSONField(blank=True, default=list, help_text='Preferred volunteer roles for group members')),
                ('preferred_venues', models.JSONField(blank=True, default=list, help_text='Preferred venues for group volunteering')),
                ('group_requirements', models.TextField(blank=True, help_text='Special requirements or requests for the group')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the group was approved', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Staff member who approved the group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_corporate_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'corporate volunteer group',
                'verbose_name_plural': 'corporate volunteer groups',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='volunteers__status_958f1d_idx'), models.Index(fields=['name'], name='volunteers__name_4477ea_idx'), models.Index(fields=['primary_contact_email'], name='volunteers__primary_2cb60c_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='eoisubmission',
            index=models.Index(fields=['status', 'created_at'], name='volunteers__status_7ac63a_idx'),
        ),
        migrations.AddIndex(
            model_name='eoisubmission',
            index=models.Index(fields=['volunteer_type', 'status'], name='volunteers__volunte_b679f5_idx'),
        ),
        migrations.AddIndex(
            model_name='eoisubmission',
            index=models.Index(fields=['user', 'status'], name='volunteers__user_id_5e06c0_idx'),
        ),
        migrations.AddIndex(
            model_name='eoisubmission',
            index=models.Index(fields=['session_key'], name='volunteers__session_273b9e_idx'),
        ),
        migrations.AddIndex(
            model_name='eoisubmission',
            index=models.Index(fields=['submitted_at'], name='volunteers__submitt_340ad5_idx'),
        ),
        migrations.AddIndex(
            model_name='eoisubmission',
            index=models.Index(fields=['reviewed_by', 'reviewed_at'], name='volunteers__reviewe_a915cb_idx'),
        ),
    ]
