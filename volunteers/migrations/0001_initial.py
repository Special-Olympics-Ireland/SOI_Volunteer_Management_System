# Generated by Django 5.0.14 on 2025-06-13 11:14

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VolunteerProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('WAITLISTED', 'Waitlisted'), ('ACTIVE', 'Active Volunteer'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('WITHDRAWN', 'Withdrawn')], default='PENDING', help_text='Current volunteer status', max_length=20)),
                ('application_date', models.DateTimeField(auto_now_add=True, help_text='When the EOI was submitted')),
                ('review_date', models.DateTimeField(blank=True, help_text='When the application was reviewed', null=True)),
                ('approval_date', models.DateTimeField(blank=True, help_text='When the application was approved', null=True)),
                ('preferred_name', models.CharField(blank=True, help_text='Preferred name for communications and name tags', max_length=100)),
                ('emergency_contact_name', models.CharField(help_text='Emergency contact full name', max_length=200)),
                ('emergency_contact_phone', models.CharField(help_text='Emergency contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')])),
                ('emergency_contact_relationship', models.CharField(help_text='Relationship to emergency contact (e.g., spouse, parent, friend)', max_length=100)),
                ('medical_conditions', models.TextField(blank=True, help_text='Any medical conditions or allergies we should be aware of')),
                ('dietary_requirements', models.TextField(blank=True, help_text='Dietary requirements, allergies, or preferences')),
                ('mobility_requirements', models.TextField(blank=True, help_text='Any mobility assistance or accessibility requirements')),
                ('experience_level', models.CharField(choices=[('NONE', 'No Experience'), ('BEGINNER', 'Beginner (1-2 events)'), ('INTERMEDIATE', 'Intermediate (3-5 events)'), ('EXPERIENCED', 'Experienced (6-10 events)'), ('EXPERT', 'Expert (10+ events)'), ('PROFESSIONAL', 'Professional/Staff')], default='NONE', help_text='Overall volunteering experience level', max_length=20)),
                ('previous_events', models.TextField(blank=True, help_text='List of previous events volunteered at')),
                ('special_skills', models.TextField(blank=True, help_text='Special skills, qualifications, or certifications')),
                ('languages_spoken', models.JSONField(blank=True, default=list, help_text='Languages spoken and proficiency levels')),
                ('availability_level', models.CharField(choices=[('FULL_TIME', 'Full Time (All Days)'), ('PART_TIME', 'Part Time (Some Days)'), ('WEEKENDS_ONLY', 'Weekends Only'), ('SPECIFIC_DAYS', 'Specific Days Only'), ('FLEXIBLE', 'Flexible'), ('LIMITED', 'Limited Availability')], default='FLEXIBLE', help_text='General availability level', max_length=20)),
                ('available_dates', models.JSONField(blank=True, default=list, help_text='Specific dates available for volunteering')),
                ('unavailable_dates', models.JSONField(blank=True, default=list, help_text='Dates not available for volunteering')),
                ('preferred_time_slots', models.JSONField(blank=True, default=list, help_text='Preferred time slots (morning, afternoon, evening, overnight)')),
                ('max_hours_per_day', models.PositiveIntegerField(default=8, help_text='Maximum hours willing to volunteer per day', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('preferred_roles', models.JSONField(blank=True, default=list, help_text='List of preferred volunteer roles')),
                ('preferred_venues', models.JSONField(blank=True, default=list, help_text='List of preferred venues or venue types')),
                ('preferred_sports', models.JSONField(blank=True, default=list, help_text='Preferred sports to work with')),
                ('role_restrictions', models.JSONField(blank=True, default=list, help_text='Roles or activities the volunteer cannot or will not do')),
                ('can_lift_heavy_items', models.BooleanField(default=True, help_text='Able to lift heavy items (over 20kg)')),
                ('can_stand_long_periods', models.BooleanField(default=True, help_text='Able to stand for long periods (4+ hours)')),
                ('can_work_outdoors', models.BooleanField(default=True, help_text='Comfortable working outdoors in various weather')),
                ('can_work_with_crowds', models.BooleanField(default=True, help_text='Comfortable working with large crowds')),
                ('has_own_transport', models.BooleanField(default=False, help_text='Has own reliable transport to venues')),
                ('transport_method', models.CharField(choices=[('OWN_CAR', 'Own Car'), ('PUBLIC_TRANSPORT', 'Public Transport'), ('CYCLING', 'Cycling'), ('WALKING', 'Walking'), ('CARPOOL', 'Carpool'), ('VOLUNTEER_TRANSPORT', 'Volunteer Transport'), ('OTHER', 'Other')], default='PUBLIC_TRANSPORT', help_text='Primary method of transport to venues', max_length=30)),
                ('t_shirt_size', models.CharField(choices=[('XS', 'Extra Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('XXL', '2X Large'), ('XXXL', '3X Large')], default='M', help_text='T-shirt size for volunteer uniform', max_length=10)),
                ('requires_uniform', models.BooleanField(default=True, help_text='Requires volunteer uniform')),
                ('has_own_equipment', models.JSONField(blank=True, default=list, help_text='List of own equipment available (radios, first aid kit, etc.)')),
                ('preferred_communication_method', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS/Text'), ('PHONE', 'Phone Call'), ('WHATSAPP', 'WhatsApp'), ('APP', 'Mobile App')], default='EMAIL', help_text='Preferred method of communication', max_length=20)),
                ('communication_frequency', models.CharField(choices=[('DAILY', 'Daily Updates'), ('WEEKLY', 'Weekly Updates'), ('IMPORTANT_ONLY', 'Important Only'), ('MINIMAL', 'Minimal Communication')], default='WEEKLY', help_text='Preferred frequency of communications', max_length=20)),
                ('training_completed', models.JSONField(blank=True, default=list, help_text='List of completed training modules')),
                ('training_required', models.JSONField(blank=True, default=list, help_text='List of required training modules')),
                ('training_preferences', models.JSONField(blank=True, default=list, help_text='Preferred training delivery methods and times')),
                ('background_check_status', models.CharField(choices=[('NOT_REQUIRED', 'Not Required'), ('REQUIRED', 'Required'), ('SUBMITTED', 'Submitted'), ('IN_PROGRESS', 'In Progress'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='NOT_REQUIRED', help_text='Background check status', max_length=20)),
                ('background_check_date', models.DateField(blank=True, help_text='Date background check was completed', null=True)),
                ('background_check_expiry', models.DateField(blank=True, help_text='Date background check expires', null=True)),
                ('references', models.JSONField(blank=True, default=list, help_text='List of references with contact information')),
                ('reference_check_status', models.CharField(choices=[('NOT_REQUIRED', 'Not Required'), ('REQUIRED', 'Required'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='NOT_REQUIRED', help_text='Reference check status', max_length=20)),
                ('motivation', models.TextField(blank=True, help_text='Why do you want to volunteer for this event?')),
                ('volunteer_goals', models.TextField(blank=True, help_text='What do you hope to achieve through volunteering?')),
                ('previous_volunteer_feedback', models.TextField(blank=True, help_text='Feedback from previous volunteer experiences')),
                ('is_corporate_volunteer', models.BooleanField(default=False, help_text='Part of a corporate volunteer group')),
                ('corporate_group_name', models.CharField(blank=True, help_text='Name of corporate group or organization', max_length=200)),
                ('group_leader_contact', models.CharField(blank=True, help_text='Contact information for group leader', max_length=200)),
                ('social_media_consent', models.BooleanField(default=False, help_text='Consent to appear in social media posts and marketing materials')),
                ('photo_consent', models.BooleanField(default=False, help_text='Consent for photos to be taken and used')),
                ('testimonial_consent', models.BooleanField(default=False, help_text='Consent to provide testimonials and quotes')),
                ('performance_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Overall performance rating (0-5 stars)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('feedback_summary', models.TextField(blank=True, help_text='Summary of feedback from supervisors and coordinators')),
                ('commendations', models.JSONField(blank=True, default=list, help_text='List of commendations and awards received')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about the volunteer')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization and search')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status_changed_at', models.DateTimeField(blank=True, help_text='When status was last changed', null=True)),
                ('status_change_reason', models.TextField(blank=True, help_text='Reason for status change')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Staff member who reviewed the application', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_volunteer_profiles', to=settings.AUTH_USER_MODEL)),
                ('status_changed_by', models.ForeignKey(blank=True, help_text='User who last changed the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changed_volunteer_profiles', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(help_text='Associated user account', on_delete=django.db.models.deletion.CASCADE, related_name='volunteer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'volunteer profile',
                'verbose_name_plural': 'volunteer profiles',
                'ordering': ['-application_date', 'user__last_name', 'user__first_name'],
                'indexes': [models.Index(fields=['status', 'application_date'], name='volunteers__status_a76c31_idx'), models.Index(fields=['user', 'status'], name='volunteers__user_id_a19f0d_idx'), models.Index(fields=['experience_level', 'status'], name='volunteers__experie_0dfaa7_idx'), models.Index(fields=['availability_level', 'status'], name='volunteers__availab_6f77ed_idx'), models.Index(fields=['is_corporate_volunteer', 'status'], name='volunteers__is_corp_d566a5_idx'), models.Index(fields=['background_check_status'], name='volunteers__backgro_f54e5f_idx'), models.Index(fields=['reference_check_status'], name='volunteers__referen_b743a9_idx'), models.Index(fields=['reviewed_by', 'review_date'], name='volunteers__reviewe_5aaa67_idx'), models.Index(fields=['application_date'], name='volunteers__applica_c34dd3_idx'), models.Index(fields=['approval_date'], name='volunteers__approva_a20006_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='volunteerprofile',
            constraint=models.CheckConstraint(check=models.Q(('max_hours_per_day__gte', 1), ('max_hours_per_day__lte', 24)), name='volunteerprofile_max_hours_per_day_range'),
        ),
        migrations.AddConstraint(
            model_name='volunteerprofile',
            constraint=models.CheckConstraint(check=models.Q(('performance_rating__isnull', True), models.Q(('performance_rating__gte', 0), ('performance_rating__lte', 5)), _connector='OR'), name='volunteerprofile_performance_rating_range'),
        ),
    ]
