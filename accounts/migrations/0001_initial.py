# Generated by Django 5.0.14 on 2025-06-13 09:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('VOLUNTEER', 'Volunteer'), ('STAFF', 'Staff'), ('VMT', 'Volunteer Management Team'), ('CVT', 'Corporate Volunteer Team'), ('GOC', 'Games Organizing Committee'), ('ADMIN', 'Administrator')], default='VOLUNTEER', help_text='Primary user type determining access level', max_length=20)),
                ('volunteer_type', models.CharField(blank=True, choices=[('GENERAL', 'General Volunteer'), ('EXISTING_SOI', 'Existing SOI Volunteer'), ('CORPORATE', 'Corporate Volunteer'), ('COMMUNITY', 'Community Volunteer'), ('THIRD_PARTY', '3rd Party Volunteer'), ('ATHLETE', 'Athlete Volunteer')], help_text='Specific volunteer category (only for volunteers)', max_length=20, null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Primary contact phone number', max_length=20)),
                ('mobile_number', models.CharField(blank=True, help_text='Mobile phone number', max_length=20)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth (required for volunteers)', null=True)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact full name', max_length=100)),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact', max_length=50)),
                ('emergency_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=20)),
                ('address_line_1', models.CharField(blank=True, max_length=255)),
                ('address_line_2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('county', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(default='Ireland', max_length=100)),
                ('department', models.CharField(blank=True, help_text='Department (for staff and management users)', max_length=100)),
                ('position', models.CharField(blank=True, help_text='Job title or position', max_length=100)),
                ('employee_id', models.CharField(blank=True, help_text='Employee ID for staff members', max_length=50, null=True, unique=True)),
                ('justgo_member_id', models.CharField(blank=True, help_text='JustGo member ID for integration', max_length=100, null=True, unique=True)),
                ('justgo_membership_type', models.CharField(choices=[('VOLUNTEER', 'Volunteer'), ('EVENT_ONLY', 'Event Only Volunteer'), ('AUXILIARY', 'Auxiliary Member'), ('NONE', 'No Membership')], default='NONE', help_text='JustGo membership type', max_length=20)),
                ('justgo_sync_status', models.CharField(choices=[('PENDING', 'Sync Pending'), ('SYNCED', 'Synced'), ('ERROR', 'Sync Error'), ('NOT_REQUIRED', 'Sync Not Required')], default='NOT_REQUIRED', help_text='JustGo synchronization status', max_length=20)),
                ('justgo_last_sync', models.DateTimeField(blank=True, help_text='Last successful JustGo sync timestamp', null=True)),
                ('profile_complete', models.BooleanField(default=False, help_text='Whether user has completed their profile')),
                ('email_verified', models.BooleanField(default=False, help_text='Whether email address has been verified')),
                ('phone_verified', models.BooleanField(default=False, help_text='Whether phone number has been verified')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('ga', 'Irish')], default='en', help_text='Preferred language for communications', max_length=10)),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('sms_notifications', models.BooleanField(default=False, help_text='Receive SMS notifications')),
                ('gdpr_consent', models.BooleanField(default=False, help_text='GDPR data processing consent')),
                ('gdpr_consent_date', models.DateTimeField(blank=True, help_text='Date GDPR consent was given', null=True)),
                ('marketing_consent', models.BooleanField(default=False, help_text='Consent to receive marketing communications')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether user account has been approved by admin')),
                ('approval_date', models.DateTimeField(blank=True, help_text='Date account was approved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(blank=True, help_text='Last recorded user activity', null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this user (admin only)')),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin user who approved this account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'indexes': [models.Index(fields=['user_type'], name='accounts_us_user_ty_b6cfc8_idx'), models.Index(fields=['volunteer_type'], name='accounts_us_volunte_c66812_idx'), models.Index(fields=['justgo_member_id'], name='accounts_us_justgo__4cecd3_idx'), models.Index(fields=['email_verified', 'is_approved'], name='accounts_us_email_v_bd097a_idx'), models.Index(fields=['created_at'], name='accounts_us_created_4734df_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
