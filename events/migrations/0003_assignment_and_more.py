# Generated by Django 5.0.14 on 2025-06-13 09:25

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0002_role_role_role_filled_positions_not_exceed_total_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assignment_type', models.CharField(choices=[('STANDARD', 'Standard Assignment'), ('EMERGENCY', 'Emergency Assignment'), ('REPLACEMENT', 'Replacement Assignment'), ('BACKUP', 'Backup Assignment'), ('ADMIN_OVERRIDE', 'Admin Override Assignment')], default='STANDARD', help_text='Type of assignment', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('CONFIRMED', 'Confirmed by Volunteer'), ('ACTIVE', 'Active/Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('REJECTED', 'Rejected'), ('WITHDRAWN', 'Withdrawn by Volunteer'), ('NO_SHOW', 'No Show'), ('SUSPENDED', 'Suspended')], default='PENDING', help_text='Current assignment status', max_length=20)),
                ('priority_level', models.CharField(choices=[('LOW', 'Low Priority'), ('NORMAL', 'Normal Priority'), ('HIGH', 'High Priority'), ('URGENT', 'Urgent'), ('CRITICAL', 'Critical')], default='NORMAL', help_text='Assignment priority level', max_length=10)),
                ('assigned_date', models.DateTimeField(auto_now_add=True, help_text='When the assignment was created')),
                ('start_date', models.DateField(blank=True, help_text='Assignment start date', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Assignment end date', null=True)),
                ('start_time', models.TimeField(blank=True, help_text='Assignment start time', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='Assignment end time', null=True)),
                ('assignment_configuration', models.JSONField(blank=True, default=dict, help_text='Assignment-specific configuration and settings')),
                ('special_instructions', models.TextField(blank=True, help_text='Special instructions for this assignment')),
                ('equipment_assigned', models.JSONField(blank=True, default=list, help_text='Equipment assigned to volunteer')),
                ('uniform_assigned', models.JSONField(blank=True, default=dict, help_text='Uniform details assigned to volunteer')),
                ('application_date', models.DateTimeField(blank=True, help_text='When volunteer applied for this role', null=True)),
                ('review_date', models.DateTimeField(blank=True, help_text='When assignment was reviewed', null=True)),
                ('approval_date', models.DateTimeField(blank=True, help_text='When assignment was approved', null=True)),
                ('confirmation_date', models.DateTimeField(blank=True, help_text='When volunteer confirmed assignment', null=True)),
                ('completion_date', models.DateTimeField(blank=True, help_text='When assignment was completed', null=True)),
                ('is_admin_override', models.BooleanField(default=False, help_text='Whether this assignment was created via admin override')),
                ('admin_override_reason', models.TextField(blank=True, help_text='Reason for admin override (required if is_admin_override=True)')),
                ('admin_override_date', models.DateTimeField(blank=True, help_text='When admin override was applied', null=True)),
                ('age_requirement_override', models.BooleanField(default=False, help_text='Override age requirements')),
                ('credential_requirement_override', models.BooleanField(default=False, help_text='Override credential requirements')),
                ('capacity_override', models.BooleanField(default=False, help_text='Override role capacity limits')),
                ('override_justification', models.TextField(blank=True, help_text='Justification for requirement overrides')),
                ('performance_rating', models.PositiveIntegerField(blank=True, help_text='Performance rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_from_volunteer', models.TextField(blank=True, help_text='Feedback from volunteer about the assignment')),
                ('feedback_from_supervisor', models.TextField(blank=True, help_text='Feedback from supervisor about volunteer performance')),
                ('check_in_time', models.DateTimeField(blank=True, help_text='When volunteer checked in', null=True)),
                ('check_out_time', models.DateTimeField(blank=True, help_text='When volunteer checked out', null=True)),
                ('actual_hours_worked', models.DecimalField(blank=True, decimal_places=2, help_text='Actual hours worked', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('attendance_notes', models.TextField(blank=True, help_text='Notes about attendance or performance')),
                ('notification_preferences', models.JSONField(blank=True, default=dict, help_text='Volunteer notification preferences for this assignment')),
                ('last_notification_sent', models.DateTimeField(blank=True, help_text='When last notification was sent', null=True)),
                ('reminder_count', models.PositiveIntegerField(default=0, help_text='Number of reminders sent')),
                ('status_changed_at', models.DateTimeField(blank=True, help_text='When status was last changed', null=True)),
                ('status_change_reason', models.TextField(blank=True, help_text='Reason for status change')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this assignment')),
                ('external_references', models.JSONField(blank=True, default=dict, help_text='External system references and IDs')),
                ('admin_override_by', models.ForeignKey(blank=True, help_text='Admin user who created the override', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_override_assignments', to=settings.AUTH_USER_MODEL)),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved this assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_assignments', to=settings.AUTH_USER_MODEL)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who created this assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_assignments', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='Event this assignment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='events.event')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_assignments', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(help_text='Role being assigned', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='events.role')),
                ('status_changed_by', models.ForeignKey(blank=True, help_text='User who last changed the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changed_assignments', to=settings.AUTH_USER_MODEL)),
                ('venue', models.ForeignKey(blank=True, help_text='Venue for this assignment (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='events.venue')),
                ('volunteer', models.ForeignKey(help_text='Volunteer assigned to this role', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'assignment',
                'verbose_name_plural': 'assignments',
                'ordering': ['-created_at', 'event', 'role', 'volunteer'],
                'indexes': [models.Index(fields=['volunteer'], name='events_assi_volunte_1de42d_idx'), models.Index(fields=['role'], name='events_assi_role_id_e1a91d_idx'), models.Index(fields=['event'], name='events_assi_event_i_f10eb0_idx'), models.Index(fields=['venue'], name='events_assi_venue_i_e6bf82_idx'), models.Index(fields=['status'], name='events_assi_status_0bfc88_idx'), models.Index(fields=['assignment_type'], name='events_assi_assignm_767010_idx'), models.Index(fields=['priority_level'], name='events_assi_priorit_8ff9f7_idx'), models.Index(fields=['start_date', 'end_date'], name='events_assi_start_d_9a46f9_idx'), models.Index(fields=['is_admin_override'], name='events_assi_is_admi_820aaa_idx'), models.Index(fields=['assigned_date'], name='events_assi_assigne_de786d_idx'), models.Index(fields=['created_at'], name='events_assi_created_d91380_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.CheckConstraint(check=models.Q(('start_date__lte', models.F('end_date'))), name='assignment_start_date_before_end_date'),
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.CheckConstraint(check=models.Q(('start_time__lte', models.F('end_time'))), name='assignment_start_time_before_end_time'),
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.CheckConstraint(check=models.Q(('is_admin_override', False), models.Q(('admin_override_reason__isnull', False), ('is_admin_override', True)), _connector='OR'), name='assignment_admin_override_requires_reason'),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together={('volunteer', 'role')},
        ),
    ]
