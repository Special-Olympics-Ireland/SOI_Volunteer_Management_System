# Generated by Django 5.0.14 on 2025-06-13 09:00

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Event name (e.g., "ISG 2026")', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly event identifier', max_length=200, unique=True)),
                ('short_name', models.CharField(blank=True, help_text='Short name for display (e.g., "ISG26")', max_length=50)),
                ('event_type', models.CharField(choices=[('INTERNATIONAL_GAMES', 'International Games'), ('NATIONAL_GAMES', 'National Games'), ('REGIONAL_GAMES', 'Regional Games'), ('LOCAL_EVENT', 'Local Event'), ('TRAINING_EVENT', 'Training Event'), ('FUNDRAISING', 'Fundraising Event'), ('OTHER', 'Other')], default='INTERNATIONAL_GAMES', help_text='Type of event', max_length=30)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PLANNING', 'Planning'), ('REGISTRATION_OPEN', 'Registration Open'), ('REGISTRATION_CLOSED', 'Registration Closed'), ('ACTIVE', 'Active/Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('ARCHIVED', 'Archived')], default='DRAFT', help_text='Current event status', max_length=30)),
                ('description', models.TextField(blank=True, help_text='Detailed event description')),
                ('tagline', models.CharField(blank=True, help_text='Event tagline or motto', max_length=200)),
                ('start_date', models.DateField(help_text='Event start date')),
                ('end_date', models.DateField(help_text='Event end date')),
                ('registration_open_date', models.DateTimeField(blank=True, help_text='When volunteer registration opens', null=True)),
                ('registration_close_date', models.DateTimeField(blank=True, help_text='When volunteer registration closes', null=True)),
                ('host_city', models.CharField(blank=True, help_text='Primary host city', max_length=100)),
                ('host_country', models.CharField(default='Ireland', help_text='Host country', max_length=100)),
                ('timezone', models.CharField(default='Europe/Dublin', help_text='Event timezone', max_length=50)),
                ('volunteer_target', models.PositiveIntegerField(default=0, help_text='Target number of volunteers', validators=[django.core.validators.MinValueValidator(0)])),
                ('volunteer_minimum_age', models.PositiveIntegerField(default=15, help_text='Minimum age for volunteers', validators=[django.core.validators.MinValueValidator(13), django.core.validators.MaxValueValidator(25)])),
                ('event_configuration', models.JSONField(blank=True, default=dict, help_text='Event-specific configuration settings')),
                ('volunteer_configuration', models.JSONField(blank=True, default=dict, help_text='Volunteer management configuration')),
                ('venue_configuration', models.JSONField(blank=True, default=dict, help_text='Venue management configuration')),
                ('role_configuration', models.JSONField(blank=True, default=dict, help_text='Role and assignment configuration')),
                ('welcome_message', models.TextField(blank=True, help_text='Welcome message for volunteers')),
                ('instructions', models.TextField(blank=True, help_text='General instructions for volunteers')),
                ('contact_information', models.JSONField(blank=True, default=dict, help_text='Event contact information')),
                ('logo', models.ImageField(blank=True, help_text='Event logo', null=True, upload_to='events/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Event banner image', null=True, upload_to='events/banners/')),
                ('brand_colors', models.JSONField(blank=True, default=dict, help_text='Event brand colors (primary, secondary, etc.)')),
                ('features_enabled', models.JSONField(blank=True, default=dict, help_text='Enabled features for this event')),
                ('integrations_config', models.JSONField(blank=True, default=dict, help_text='Third-party integration configuration')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this event is active')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this event should be featured')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this event is publicly visible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status_changed_at', models.DateTimeField(blank=True, help_text='When status was last changed', null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this event')),
                ('external_references', models.JSONField(blank=True, default=dict, help_text='External system references and IDs')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('event_managers', models.ManyToManyField(blank=True, help_text='Users who can manage this event', related_name='managed_events', to=settings.AUTH_USER_MODEL)),
                ('status_changed_by', models.ForeignKey(blank=True, help_text='User who last changed the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changed_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'ordering': ['-start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Venue name (e.g., "Aviva Stadium")', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly venue identifier', max_length=200)),
                ('short_name', models.CharField(blank=True, help_text='Short name for display (e.g., "Aviva")', max_length=50)),
                ('venue_type', models.CharField(choices=[('SPORTS_FACILITY', 'Sports Facility'), ('STADIUM', 'Stadium'), ('ARENA', 'Arena'), ('GYMNASIUM', 'Gymnasium'), ('POOL', 'Swimming Pool'), ('FIELD', 'Playing Field'), ('COURT', 'Court'), ('TRACK', 'Track'), ('CONFERENCE_CENTER', 'Conference Center'), ('HOTEL', 'Hotel'), ('ACCOMMODATION', 'Accommodation'), ('TRANSPORT_HUB', 'Transport Hub'), ('MEDICAL_FACILITY', 'Medical Facility'), ('CATERING_FACILITY', 'Catering Facility'), ('MEDIA_CENTER', 'Media Center'), ('VOLUNTEER_CENTER', 'Volunteer Center'), ('STORAGE', 'Storage Facility'), ('OTHER', 'Other')], default='SPORTS_FACILITY', help_text='Type of venue', max_length=30)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PLANNING', 'Planning'), ('CONFIRMED', 'Confirmed'), ('SETUP', 'Setup in Progress'), ('ACTIVE', 'Active/Operational'), ('BREAKDOWN', 'Breakdown in Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Current venue status', max_length=30)),
                ('description', models.TextField(blank=True, help_text='Detailed venue description')),
                ('purpose', models.CharField(blank=True, help_text='Primary purpose or sport for this venue', max_length=200)),
                ('address_line_1', models.CharField(help_text='Street address line 1', max_length=200)),
                ('address_line_2', models.CharField(blank=True, help_text='Street address line 2 (optional)', max_length=200)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('county', models.CharField(blank=True, help_text='County/State/Province', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20)),
                ('country', models.CharField(default='Ireland', help_text='Country', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate', max_digits=10, null=True)),
                ('total_capacity', models.PositiveIntegerField(default=0, help_text='Total venue capacity', validators=[django.core.validators.MinValueValidator(0)])),
                ('volunteer_capacity', models.PositiveIntegerField(default=0, help_text='Maximum number of volunteers for this venue', validators=[django.core.validators.MinValueValidator(0)])),
                ('spectator_capacity', models.PositiveIntegerField(default=0, help_text='Spectator capacity', validators=[django.core.validators.MinValueValidator(0)])),
                ('accessibility_level', models.CharField(choices=[('FULL', 'Fully Accessible'), ('PARTIAL', 'Partially Accessible'), ('LIMITED', 'Limited Accessibility'), ('NOT_ACCESSIBLE', 'Not Accessible'), ('UNKNOWN', 'Accessibility Unknown')], default='UNKNOWN', help_text='Overall accessibility level', max_length=20)),
                ('wheelchair_accessible', models.BooleanField(default=False, help_text='Wheelchair accessible')),
                ('accessible_parking', models.BooleanField(default=False, help_text='Accessible parking available')),
                ('accessible_toilets', models.BooleanField(default=False, help_text='Accessible toilet facilities')),
                ('hearing_loop', models.BooleanField(default=False, help_text='Hearing loop system available')),
                ('public_transport_access', models.TextField(blank=True, help_text='Public transport access information')),
                ('parking_spaces', models.PositiveIntegerField(default=0, help_text='Number of parking spaces', validators=[django.core.validators.MinValueValidator(0)])),
                ('parking_cost', models.CharField(blank=True, help_text='Parking cost information', max_length=100)),
                ('facilities', models.JSONField(blank=True, default=dict, help_text='Available facilities and amenities')),
                ('catering_available', models.BooleanField(default=False, help_text='Catering facilities available')),
                ('wifi_available', models.BooleanField(default=False, help_text='WiFi available')),
                ('first_aid_station', models.BooleanField(default=False, help_text='First aid station on site')),
                ('venue_configuration', models.JSONField(blank=True, default=dict, help_text='Venue-specific configuration settings')),
                ('operational_hours', models.JSONField(blank=True, default=dict, help_text='Venue operational hours by day')),
                ('equipment_available', models.JSONField(blank=True, default=list, help_text='Available equipment and resources')),
                ('venue_manager', models.CharField(blank=True, help_text='Venue manager name', max_length=200)),
                ('contact_phone', models.CharField(blank=True, help_text='Venue contact phone number', max_length=20)),
                ('contact_email', models.EmailField(blank=True, help_text='Venue contact email', max_length=254)),
                ('emergency_contact', models.JSONField(blank=True, default=dict, help_text='Emergency contact information')),
                ('venue_image', models.ImageField(blank=True, help_text='Main venue image', null=True, upload_to='venues/images/')),
                ('floor_plan', models.FileField(blank=True, help_text='Venue floor plan document', null=True, upload_to='venues/floor_plans/')),
                ('venue_map', models.FileField(blank=True, help_text='Venue location map', null=True, upload_to='venues/maps/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this venue is active')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is a primary venue for the event')),
                ('requires_security_clearance', models.BooleanField(default=False, help_text='Whether venue requires security clearance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status_changed_at', models.DateTimeField(blank=True, help_text='When status was last changed', null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this venue')),
                ('external_references', models.JSONField(blank=True, default=dict, help_text='External system references and IDs')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this venue', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_venues', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='Event this venue belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='venues', to='events.event')),
                ('status_changed_by', models.ForeignKey(blank=True, help_text='User who last changed the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changed_venues', to=settings.AUTH_USER_MODEL)),
                ('venue_coordinators', models.ManyToManyField(blank=True, help_text='Users who coordinate this venue', related_name='coordinated_venues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'venue',
                'verbose_name_plural': 'venues',
                'ordering': ['event', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='events_even_status_5709b6_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type'], name='events_even_event_t_a87b5c_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_date', 'end_date'], name='events_even_start_d_7e0d92_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['is_active', 'is_public'], name='events_even_is_acti_9c1837_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['slug'], name='events_even_slug_30eb0f_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['created_at'], name='events_even_created_52c227_idx'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('end_date__gte', models.F('start_date'))), name='event_end_date_after_start_date'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('volunteer_target__gte', 0)), name='event_volunteer_target_non_negative'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['event'], name='events_venu_event_i_4299cd_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['status'], name='events_venu_status_56c9b0_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['venue_type'], name='events_venu_venue_t_8565ea_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['city', 'country'], name='events_venu_city_55b4b0_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['is_active', 'is_primary'], name='events_venu_is_acti_e58f83_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['accessibility_level'], name='events_venu_accessi_e8dbae_idx'),
        ),
        migrations.AddIndex(
            model_name='venue',
            index=models.Index(fields=['created_at'], name='events_venu_created_fddbc6_idx'),
        ),
        migrations.AddConstraint(
            model_name='venue',
            constraint=models.CheckConstraint(check=models.Q(('total_capacity__gte', 0)), name='venue_total_capacity_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='venue',
            constraint=models.CheckConstraint(check=models.Q(('volunteer_capacity__gte', 0)), name='venue_volunteer_capacity_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='venue',
            constraint=models.CheckConstraint(check=models.Q(('spectator_capacity__gte', 0)), name='venue_spectator_capacity_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='venue',
            constraint=models.CheckConstraint(check=models.Q(('parking_spaces__gte', 0)), name='venue_parking_spaces_non_negative'),
        ),
        migrations.AlterUniqueTogether(
            name='venue',
            unique_together={('event', 'slug')},
        ),
    ]
